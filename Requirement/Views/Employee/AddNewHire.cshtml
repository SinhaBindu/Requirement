@model Requirement.Models.EmployeeModel
@using Requirement.Manager
@{
    ViewBag.Title = "Employee Form";
    var now = DateTime.Now;
    var startDate = new DateTime(now.Year, now.Month, 1);
    var endDate = startDate.AddMonths(1).AddDays(-1);
}
<style>
    .multiselect-container {
        background: #f3f3f9 !important;
    }

        .multiselect-container > li > a > label > input[type=checkbox] {
            margin-bottom: 5px;
            margin-right: 6px;
        }

        .multiselect-container > li > a > label {
            margin: 0;
            height: 100%;
            cursor: pointer;
            font-weight: 400;
            padding: 3px 10px 0px 10px;
        }
</style>

<div class="page-bread page-titles">
    <div class="bread-flex">
        <h1>@ViewBag.Title</h1>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/home/">Dashboard</a></li>
            <li class="breadcrumb-item active">@ViewBag.Title</li>
        </ol>
    </div>
</div>

<div class="col-lg-12">
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">New Hire Approval Form for Full Time Employees</h4>
            <h5 class="semi-title">100% Budgeted position</h5>

            <div class="basic-form">
                @using (Html.BeginForm("AddNewHire", "Employee", FormMethod.Post, new { @id = "formid", @class = "", role = "form", autocomplete = "off", enctype = "multipart/form-data" }))
                {
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="basic-formss">
                        <div class="form-row">
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.HiringTypeId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                <div class="col-md-10s">
                                    @Html.DropDownListFor(model => model.HiringTypeId, CommonModel.GetALLHyringM(), null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.HiringTypeId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.PositionName, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.PositionName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PositionName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.ThemeId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.DropDownListFor(model => model.ThemeId, CommonModel.GetThemeMaster(), null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ThemeId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.ProjectId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.DropDownListFor(model => model.ProjectId, CommonModel.GetProjectMaster(), null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ProjectId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-rows">
                            <div class="dv_multiplecost" style="display:none;">
                                <table id="dataTable" width="100%" class="small">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Grant ID</th>
                                            <th>Activity Code</th>
                                            <th>Budget Code</th>
                                            <th>Allotment Percent</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @*<tr>
                                                <td><input type="text" name="MultipleCostName" id="MultipleCostName_0" value="" /></td>
                                                    <td><input type="text" name="GrantID" id="GrantID_0" value="" /></td>
                                                    <td><input type="text" name="ActivityCode" id="ActivityCode_0" value="" /></td>
                                                    <td><input type="text" name="BudgetCode" id="BudgetCode_0" value="" /></td>
                                                <td><button class="deleteRow">Delete</button></td>
                                            </tr>*@
                                    </tbody>
                                </table>
                                <button id="addRow" class="add-btn">Add Row</button>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.LocationId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.DropDownListFor(model => model.LocationId, CommonModel.GetALLLocation(), null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-4 dv_otherlocation" style="display:none;">
                                @Html.LabelFor(model => model.OtherLocation, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.OtherLocation, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.OtherLocation, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.TypeofApplicableId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                <div class="col-md-10s">
                                    @Html.DropDownListFor(model => model.TypeofApplicableId, CommonModel.GetALLApplicableM(), null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.TypeofApplicableId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.NoofPositionsId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.NoofPositionsId, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.NoofPositionsId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.jobLocationTypeId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                <div class="col-md-10s">
                                    @Html.DropDownListFor(model => model.jobLocationTypeId, CommonModel.GetALLJobLocationM(), null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.jobLocationTypeId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.ReportingManager, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.ReportingManager, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ReportingManager, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-row">
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.Durationoftheposition_Fdate, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.Durationoftheposition_Fdate, new { @class = "datepicker form-control", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.Durationoftheposition_Fdate, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.Durationoftheposition_Tdate, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.Durationoftheposition_Tdate, new { @class = "datepicker form-control", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.Durationoftheposition_Tdate, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-4 dv_CostCentreCode_Id" style="display:none;">
                                @Html.LabelFor(model => model.CostCentreCode_Id, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.CostCentreCode_Id, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.CostCentreCode_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>



                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.BaseSalRangepermonth_Id, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.BaseSalRangepermonth_Id, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.BaseSalRangepermonth_Id, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Grade_Id, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                <div class="col-md-10s">
                                    @Html.DropDownListFor(model => model.Grade_Id, CommonModel.GetALLGradeM(), null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Grade_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.JD_Availability_Id, htmlAttributes: new { @class = "control-label col-xs-12" })
                                <div class="checkbox check-control">
                                    @foreach (var item in CommonModel.GetALLYesNoMId())
                                    {
                                        <div class="input-spacer">
                                            @Html.RadioButtonFor(model => model.JD_Availability_Id, item.Value, new { id = "JD_Availability_Id" + item.Value }) @item.Text
                                        </div>
                                    }

                                    @Html.ValidationMessageFor(model => model.JD_Availability_Id, "", new { @class = "text-danger" })
                                </div>
                                <div class="mark-devide"></div>
                            </div>
                            <div class="col-lg-12" id="div_JD_AvailabilityIfYes_Doc" style="display: none;">
                                <div class="card">
                                    <div class="card-body">
                                        @*<h4 class="card-title">@Requirement.Models.PartDisplayName.Section_JDHeader</h4>*@
                                        <p class="text-muted">
                                            <code></code>
                                        </p>
                                        <div id="accordion-three" class="accordion">
                                            <div class="card">
                                                <div class="card-header">
                                                    <h5 class="mb-0 collapsed" data-toggle="collapse" data-target="#collapseOne4" aria-expanded="false" aria-controls="collapseOne4"><i class="fa" aria-hidden="true"></i> @Requirement.Models.PartDisplayName.Section_JDHeader</h5>
                                                </div>
                                                <div id="collapseOne4" class="collapse" data-parent="#accordion-three" style="">
                                                    <div class="card-body">
                                                        @Html.HiddenFor(m => m.JobDModel.JobId_pk)
                                                        @Html.HiddenFor(m => m.JobDModel.NewHireId_fk)
                                                        <!--1st About Position Start-->
                                                        <h5 class="text-center">@Requirement.Models.PartDisplayName.Section_JDAbout</h5>

                                                        @*@using (Html.BeginForm("JobD", "JD", FormMethod.Post, new { @id = "formid", @class = "", role = "form", autocomplete = "off", enctype = "multipart/form-data" }))
                                                            {
                                                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })*@

                                                        <div class="row">
                                                            <table id="dataTableabout" class="table table-bordered">
                                                                <thead>
                                                                    <tr>
                                                                        <th>About Position</th>
                                                                        <th>About Position Value</th>
                                                                        <th>Order By</th>
                                                                        <th>Action</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody></tbody>
                                                            </table>

                                                            <button id="addRowabout" class="btn btn-success">Add Row</button>
                                                        </div>

                                                        @*<div class="form-row pt-3">
                                                                <div class="form-group col-md-4 offset-4">
                                                                    <input type="submit" id="btnsubmit" class="btn btn-primary" value="Submit" />
                                                                </div>
                                                            </div>*@
                                                        @*}*@

                                                        <!--1st About Position end-->
                                                        <!--2nd Key Role start-->
                                                        <h5 class="text-center">@Requirement.Models.PartDisplayName.Section_JDKeyRole</h5>

                                                        <div class="row">
                                                            <table id="dataTablekeyrole" class="table table-bordered">
                                                                <thead>
                                                                    <tr>
                                                                        <th>Key Role</th>
                                                                        <th>Key Role Value</th>
                                                                        <th>Order By</th>
                                                                        <th>Action</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody></tbody>
                                                            </table>

                                                            <button id="addRowkeyrole" class="btn btn-success">Add Row</button>
                                                        </div>
                                                        <!--2nd Key Role end-->
                                                        <!--Other Details-->
                                                        <h5 class="text-center">@Requirement.Models.PartDisplayName.Section_JDOther</h5>

                                                        <div class="form-row">
                                                            <div class="form-group col-md-6">
                                                                @Html.LabelFor(model => model.JobDModel.ApplicationClosureDate, htmlAttributes: new { @class = "control-label" })
                                                                <span style="color:red;">*</span>
                                                                @Html.TextBoxFor(model => model.JobDModel.ApplicationClosureDate, new { @class = "form-control datepicker" })
                                                                @Html.ValidationMessageFor(model => model.JobDModel.ApplicationClosureDate, "", new { @class = "text-danger" })
                                                            </div>
                                                            <div class="form-group col-md-12">
                                                                @Html.LabelFor(model => model.JobDModel.HiringLink, htmlAttributes: new { @class = "control-label" })
                                                                <span style="color:red;">*</span>
                                                                @Html.TextAreaFor(model => model.JobDModel.HiringLink, new { @class = "form-control", row = "5", col = "12" })
                                                                @Html.ValidationMessageFor(model => model.JobDModel.HiringLink, "", new { @class = "text-danger" })
                                                            </div>
                                                            <div class="form-group col-md-12">
                                                                @Html.LabelFor(model => model.JobDModel.AbouttheProject, htmlAttributes: new { @class = "control-label" })
                                                                <span style="color:red;">*</span>
                                                                @Html.TextAreaFor(model => model.JobDModel.AbouttheProject, new { @class = "form-control", row = "5", col = "12" })
                                                                @Html.ValidationMessageFor(model => model.JobDModel.AbouttheProject, "", new { @class = "text-danger" })
                                                            </div>
                                                        </div>
                                                        <!--Other Details End-->
                                                    </div>
                                                </div>


                                            </div>




                                        </div>
                                    </div>
                                </div>
                            </div>
                            @*<div class="form-group col-md-6" id="div_JD_AvailabilityIfYes_Doc" style="display: none;">
                                    @Html.LabelFor(model => model.JD_AvailabilityIfYes_Doc, htmlAttributes: new { @class = "control-label" })
                                    <div class="col-md-10s">
                                        @Html.TextBoxFor(model => model.JD_AvailabilityIfYes_Doc, new { @class = "form-control-input-2", type = "file" })
                                        @Html.ValidationMessageFor(model => model.JD_AvailabilityIfYes_Doc, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@
                        </div>
                        <div class="form-row"><h5>@Requirement.Models.PartDisplayName.Section_SourcingChannel</h5></div>
                        <div class="form-row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Advertisement_Id, htmlAttributes: new { @class = "control-label col-xs-12" })
                                <div class="checkbox check-control">
                                    @foreach (var item in CommonModel.GetALLAdvertisement())
                                    {
                                        <div class="input-spacer">
                                            @Html.RadioButtonFor(model => model.Advertisement_Id, item.Value, new { id = "GetALLAdvertisement" + item.Value }) @item.Text
                                        </div>
                                    }
                                    @Html.ValidationMessageFor(model => model.Advertisement_Id, "", new { @class = "text-danger" })
                                </div>
                                <strong>@Requirement.Models.PartDisplayName.Note_Advertisement</strong>
                                <div class="mark-devide"></div>
                            </div>

                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.EmpaneledHead_Id, htmlAttributes: new { @class = "control-label col-xs-12" })
                                <div class="checkbox check-control">
                                    @foreach (var item in CommonModel.GetALLYesNoMId().ToList())
                                    {
                                        <div class="input-spacer">
                                            @Html.RadioButtonFor(model => model.EmpaneledHead_Id, item.Value, new { id = "EmpaneledHead_Id" + item.Value }) @item.Text
                                        </div>
                                    }

                                    @Html.ValidationMessageFor(model => model.EmpaneledHead_Id, "", new { @class = "text-danger" })
                                </div>
                                <div class="mark-devide"></div>
                                <strong>@Requirement.Models.PartDisplayName.NoteLable_EmpaneledHead</strong>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group col-md-12" id="div_TypeOfInterview">
                                @Html.LabelFor(model => model.TypeOfInterview, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                <div class="col-md-12s">
                                    @Html.DropDownListFor(model => model.TypeOfInterview, CommonModel.GetALLIT(), null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.TypeOfInterview, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-row"><h5>@Requirement.Models.PartDisplayName.Section_Interview</h5></div>
                        <div class="form-row">
                            <div class="form-group col-md-6" id="div_InterviewPanel" style="display: none;">
                                @Html.LabelFor(model => model.InterviewPanel, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextAreaFor(model => model.InterviewPanel, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.InterviewPanel, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6" id="div_InterviewPanel2" style="display: none;">
                                @Html.LabelFor(model => model.InterviewPanel2, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextAreaFor(model => model.InterviewPanel2, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.InterviewPanel2, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-row"><h5>@Requirement.Models.PartDisplayName.Section_SourcingChannel</h5></div>
                        <div class="form-row">
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.SelectionProcess_Id, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                <div class="col-md-10s">
                                    @Html.DropDownListFor(model => model.SelectionProcess_Id, CommonModel.GetALLSPM(), null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.SelectionProcess_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.SelectionProcessStep2, htmlAttributes: new { @class = "control-label col-xs-12" })
                                <span style="color:red;">*</span>
                                <div class="checkbox check-control">
                                    @foreach (var item in CommonModel.GetSelectionInterview().ToList())
                                    {
                                        <div class="input-spacer">
                                            @Html.RadioButtonFor(model => model.SelectionProcessStep2, item.Value, new { id = "SelectionProcessStep2" + item.Value }) @item.Text
                                        </div>
                                    }

                                    @Html.ValidationMessageFor(model => model.SelectionProcessStep2, "", new { @class = "text-danger" })
                                </div>
                                <div class="mark-devide"></div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.SelectionProcessStep3, htmlAttributes: new { @class = "control-label col-xs-12" })
                                <span style="color:red;">*</span>
                                <div class="checkbox check-control">
                                    @foreach (var item in CommonModel.GetALLYesNoMId().ToList())
                                    {
                                        <div class="input-spacer">
                                            @Html.RadioButtonFor(model => model.SelectionProcessStep3, item.Value, new { id = "SelectionProcessStep3" + item.Value }) @item.Text
                                        </div>
                                    }

                                    @Html.ValidationMessageFor(model => model.SelectionProcessStep3, "", new { @class = "text-danger" })
                                </div>
                                <div class="mark-devide"></div>
                            </div>
                        </div>
                        <div class="form-row"><h5>@Requirement.Models.PartDisplayName.Section_Infrastructure</h5></div>
                        <div class="form-row">
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.LaptopwithSpecifications_Id, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.LaptopwithSpecifications_Id, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LaptopwithSpecifications_Id, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-4">
                                @Html.LabelFor(model => model.Anyspecificsoftwarewithlicense, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.Anyspecificsoftwarewithlicense, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Anyspecificsoftwarewithlicense, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-row"><h5>@Requirement.Models.PartDisplayName.Section_Approval</h5></div>
                        <div class="form-row">
                            <div class="form-group col-md-12">
                                @Html.LabelFor(model => model.ApprovedBy, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @*@Html.DropDownListFor(model => model.ApprovedBy, CommonModel.GetUserAll(), null, new { @class = "form-control select2 CreateMultiCheckBox" })*@
                                @Html.DropDownListFor(model => model.ApprovedBy, new List<SelectListItem>(), null, new { @class = "form-control CreateMultiCheckBox", multiple = "multiple" })
                                @Html.ValidationMessageFor(model => model.ApprovedBy, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-row pt-1">
                            <div class="form-group col-md-4 offset-8">
                                @*<button type="submit" class="btn btn-primary">Submit</button>*@
                                <input type="submit" name="btnsubmit" id="btnsubmit" class="btn btn-primary" value="Submit" />
                            </div>
                        </div>
                    </div>
                }
            </div>

        </div>
    </div>
    <div class="notes-section" style="margin-top: 20px;">
        <h5>Notes:</h5>
        <ul>
            <li>Requestor must be the Hiring Manager/ Reporting Manager. In case Budget Holder is the Hiring Manager, signature at one place should suffice as an Approver.</li>
            <li>Finance Review and P&C review will be done by the state leads of the respective functions assigned to the Budget Holder.</li>
            <li>If the position is in anticipation of a Project, approval will be given by CEO for the purpose of advertisement & interview only. No formal offer will be made unless the project is awarded and written approval is received from the assigned Budget holder.</li>
        </ul>
    </div>
</div>




@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/JS/Master.js"></script>
    <script>
        $(document).ready(function () {

            BindGetAllUserist("ApprovedBy", "", 1);
            $('#ApprovedBy').multiselect({
                includeSelectAllOption: true, // Adds "Select All" checkbox
                enableFiltering: true, // Enables search box
                enableCaseInsensitiveFiltering: true, // Case insensitive search
                buttonWidth: '100%', // Adjusts button width
                maxHeight: 250, // Limits dropdown height
                nonSelectedText: 'Select Below', // Default text when nothing is selected
                selectAllText: 'Select All', // "Select All" text
                allSelectedText: 'All Selected', // Text when all options are selected
                numberDisplayed: 2 // Shows limited selected options in the button
            });
            //$('.select2').select2();
            //$("#ApprovedBy").CreateMultiCheckBox({
            //    width: '500px',
            //    defaultText: 'Select Below', height: '250px'
            //});
            //setTimeout(function () {
            //}, 500)


            let rowIndex = 0; // Counter to track row index
            // Add Row
            $('#addRow').click(function (e) {
                e.preventDefault();
                var rowCount = $('#dataTable tbody').find('tr').length;
                if (rowCount == 0)
                    rowIndex = 0;
                else
                    rowIndex++;
                //rowIndex = rowCount == 0 ? 0 : rowIndex++; // Set rowIndex to the next available index
                var newRow = '<tr>' +
                    '<td><input type="text" class="MultipleCostName" name="MultipleCostName" id="MultipleCostName_' + rowIndex + '" placeholder="Name"></td>' +
                    '<td><input type="text" class="GrantID" name="GrantID" id="GrantID_' + rowIndex + '" placeholder="Grant ID"></td>' +
                    '<td><input type="text" class="ActivityCode" name="ActivityCode" id="ActivityCode_' + rowIndex + '" placeholder="Activity Code"></td>' +
                    '<td><input type="text" class="BudgetCode" name="BudgetCode" id="BudgetCode_' + rowIndex + '" placeholder="Budget Code"></td>' +
                    '<td><input type="text" class="BudgetCode" name="AllotmentPercent" id="AllotmentPercent_' + rowIndex + '" placeholder="Allotment Percentages"></td>' +
                    '<td><button class="deleteRow">Delete</button></td>' +
                    '</tr>';
                $('#dataTable tbody').append(newRow);
            });

            // Delete Row
            $(document).on('click', '.deleteRow', function () {
                $(this).closest('tr').remove();
                updateRowIndexes();
            });

            // Function to update row indexes after deletion
            function updateRowIndexes() {
                rowIndex = 0; // Reset row index counter
                $('#dataTable tbody tr').each(function (index) {
                    //var rowCount = $('#dataTable tbody').find('tr').length;
                    rowIndex = index;
                    // Increment row index
                    $(this).find('input[type="text"]').each(function () {
                        var inputId = $(this).attr('id').split('_')[0]; // Get the input type (name or age)
                        $(this).attr('id', inputId + '_' + rowIndex); // Update the input ID
                    });
                });
            }
        });
    </script>

    <script>
        $(document).ready(function () {
            var dateFormat = "dd-M-yy";
            from = $("#Durationoftheposition_Fdate").datepicker({
                defaultDate: "+1w",
                changeMonth: true,
                changeYear: true,
                numberOfMonths: 1,
                dateFormat: 'dd-M-yy',
            }).on("change", function () {
                to.datepicker("option", "minDate", getDate(this));
            }),
                to = $("#Durationoftheposition_Tdate").datepicker({
                    defaultDate: "+1w",
                    changeMonth: true,
                    changeYear: true,
                    numberOfMonths: 1,
                    dateFormat: 'dd-M-yy',
                }).on("change", function () {
                    from.datepicker("option", "maxDate", getDate(this));
                });
            function getDate(element) {
                var date;
                try {
                    date = $.datepicker.parseDate(dateFormat, element.value);
                } catch (error) {
                    date = null;
                }
                return date;
            }
            $('#TypeOfInterview').change(function () {
                var selectedValue = $(this).val();
                $('#div_InterviewPanel, #div_InterviewPanel2').hide();
                $('#InterviewPanel').val(''); $('#InterviewPanel2').val(''); $('#InterviewPanel').removeAttr('required'); $('#InterviewPanel2').removeAttr('required');
                if (selectedValue == '1') { // Round 1
                    $('#div_InterviewPanel').show();
                    $('#InterviewPanel').attr('required', 'required');
                } else if (selectedValue == '2') { // Round 2
                    $('#div_InterviewPanel, #div_InterviewPanel2').show();
                    $('#InterviewPanel2').attr('required', 'required');
                }
            });

            // Event listener for changes in JD_Availability_Id radio buttons
            $('input[name="JD_Availability_Id"]').change(function () {
                $('#div_JD_AvailabilityIfYes_Doc').hide();
                // $('#JD_AvailabilityIfYes_Doc').val('');
                if ($(this).val() == "1") {
                    $('#div_JD_AvailabilityIfYes_Doc').show();
                }
            });

            $('#HiringTypeId').change(function () {
                $('.dv_multiplecost,.dv_CostCentreCode_Id').hide(); $('#CostCentreCode_Id').val(''); $('#dataTable tbody').empty(); $('#CostCentreCode_Id').removeAttr('required');
                if ($(this).val() == "2")
                    $('.dv_multiplecost').show();
                else if ($(this).val() == "1") {
                    $('.dv_CostCentreCode_Id').show();
                    $('#CostCentreCode_Id').attr('required', 'required');
                }

            });
            $('#LocationId').change(function () {
                $('.dv_otherlocation').hide();
                if ($(this).val() == "99") {
                    $('.dv_otherlocation').show();
                }
            });

            $("#formid").on("submit", function (event) {
                event.preventDefault();
                debugger;


                var tblcostdata = [], objdata = ""; tbldataabout = []; tbldatakeyrole = [];
                if ($('#HiringTypeId').val() == "2") {
                    $('#dataTable tbody tr').each(function (rowInd) {
                        var MultipleCostName = $(this).find(`#MultipleCostName_${rowInd}`).val();
                        var GrantID = $(this).find(`#GrantID_${rowInd}`).val();
                        var ActivityCode = $(this).find(`#ActivityCode_${rowInd}`).val();
                        var BudgetCode = $(this).find(`#BudgetCode_${rowInd}`).val();
                        var AllotmentPercent = $(this).find(`#AllotmentPercent_${rowInd}`).val();
                        tblcostdata.push({
                            MultipleCostName: MultipleCostName,
                            GrantID: GrantID,
                            ActivityCode: ActivityCode,
                            AllotmentPercent: AllotmentPercent,
                            MonthlyAmount: null,
                        });
                    });
                }
                if ($('input[name="JD_Availability_Id"]').val() == "1") {
                    //About Position push the data
                    $('#dataTableabout tbody tr').each(function (rowInd) {
                        var strId = $(this).find(`#AboutPositionId_${rowInd}`).val();
                        var strval = $(this).find(`#AboutPositionValue_${rowInd}`).val();
                        var strOrderBy = $(this).find(`#OrderBy_${rowInd}`).val();
                        tbldataabout.push({
                            AboutPositionId: strId,
                            AboutPositionValue: strval,
                            OrderBy: strOrderBy,
                        });
                    });
                    //Key Role push the data
                    $('#dataTablekeyrole tbody tr').each(function (rowInd) {
                        var strId = $(this).find(`#KeyRoleId_${rowInd}`).val();
                        var strval = $(this).find(`#KeyValue_${rowInd}`).val();
                        var strOrderBy = $(this).find(`#OrderBy_${rowInd}`).val();
                        tbldatakeyrole.push({
                            KeyRoleId: strId,
                            KeyValue: strval,
                            OrderBy: strOrderBy,
                        });
                    });

                }

                var formData = new FormData(this);
                // Append the image file to FormData
                //if ($('input[name="JD_Availability_Id"]').val()=="1") {
                //    var imageFile = $('#JD_AvailabilityIfYes_Doc')[0].files[0];
                //    if (imageFile) {
                //        formData.append('JD_AvailabilityIfYes_Doc', imageFile);
                //    }
                //}
                var AppUserBy = $('.CreateMultiCheckBox').val();
                if (AppUserBy != null && AppUserBy.length > 0) {
                    formData.append('ApprovedBy', JSON.stringify(AppUserBy));
                }
                formData.append('tblcostdata', JSON.stringify(tblcostdata));
                formData.append('tblcostdata', JSON.stringify(tblcostdata));
                formData.append('tbldataabout', JSON.stringify(tbldataabout));
                formData.append('tbldatakeyrole', JSON.stringify(tbldatakeyrole));

                if (confirm('Are you sure you want to submit the form?')) {
                    $.ajax({
                        type: "POST",
                        url: document.baseURI + "/Employee/AddNewHire/",
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (resp) {
                            if (resp.success) {
                                toastr.success("Success", resp.message);
                                //$("#formid")[0].reset();
                            } else {
                                toastr.error("Error", resp.message);
                            }
                        },
                        //success: function (resp) {
                        //    if (resp.StatusType === "success") {
                        //        toastr.success("Success", resp.Message);
                        //        $("#formid")[0].reset();
                        //    } else {
                        //        toastr.error("Error", resp.Message);
                        //    }
                        //},
                        //error: function (req, error) {
                        //    var errorMsg = req.statusText ? req.statusText : error;
                        //    toastr.error("Error", `There was a communication error: ${errorMsg}`);
                        //}
                    });
                }
            });

        });
    </script>

    <!--JD Details-->
    <script>
        $(document).ready(function () {

            $(".datepicker").datepicker({
                defaultDate: "+1w",
                changeMonth: true,
                changeYear: true,
                numberOfMonths: 1,
                dateFormat: 'dd-M-yy',

            })


            // Function to fetch dropdown data
            function loadTypeOfNameDropdownabout(callback) {
                $.ajax({
                    url: "/Master/GetTypeOfNames", // Controller method
                    type: "GET",
                    success: function (data) {
                        let dropdownHtml = `<option value="">Select Type</option>`;
                        $.each(data, function (index, item) {
                            dropdownHtml += `<option value="${item.Value}">${item.Text}</option>`; // ✅ Using Text instead of ID
                        });
                        callback(dropdownHtml);
                    },
                    error: function () {
                        toastr.error("Error fetching About Position data.");
                    }
                });
            }
            // Function to add a new row
            function addNewRowabout() {
                var rowCount = $('#dataTableabout tbody').find('tr').length;
                if (rowCount == 0)
                    rowIndex = 0;
                else
                    rowIndex++;
                loadTypeOfNameDropdownabout(function (dropdownOptions) {
                    let newRow = `
                                    <tr>
                                        <td>
                                            <select class="AboutPositionId form-control" name="AboutPositionId[]" id="AboutPositionId_${rowIndex}">
                                                ${dropdownOptions}
                                            </select>
                                        </td>
                                        <td>
                                            <input type="text" class="AboutPositionValue form-control" name="AboutPositionValue[]" id="AboutPositionValue_${rowIndex}" placeholder="About Position Value">
                                        </td>
                                        <td>
                                                <input type="number" class="OrderBy form-control" name="OrderBy[]" id="OrderBy_${rowIndex}" placeholder="Order By">
                                            </td>
                                        <td>
                                            <button type="button" class="deleteRowabout btn btn-danger">Delete</button>
                                        </td>
                                    </tr>`;
                    $('#dataTableabout tbody').append(newRow);
                });
            }

            // Add first row on page load
            addNewRowabout();

            // Add row on button click
            $('#addRowabout').click(function (e) {
                e.preventDefault();
                addNewRowabout();
            });

            // Delete row
            $(document).on('click', '.deleteRowabout', function () {
                $(this).closest('tr').remove();
                updateRowIndexesJDtbl("dataTableabout");
            });

            //Key Role Add Row

            // Function to fetch dropdown data
            function loadTypeOfNameDropdownKeyrole(callback) {
                $.ajax({
                    url: "/Master/GetKeyRole", // Controller method
                    type: "GET",
                    success: function (data) {
                        let dropdownHtml = `<option value="">Select Type</option>`;
                        $.each(data, function (index, item) {
                            dropdownHtml += `<option value="${item.Value}">${item.Text}</option>`; // ✅ Using Text instead of ID
                        });
                        callback(dropdownHtml);
                    },
                    error: function () {
                        toastr.error("Error fetching TypeOfName data.");
                    }
                });
            }
            // Function to add a new row
            function addNewRowKeyrole() {
                var rowCount = $('#dataTablekeyrole tbody').find('tr').length;
                if (rowCount == 0)
                    rowIndex = 0;
                else
                    rowIndex++;
                loadTypeOfNameDropdownKeyrole(function (dropdownOptions) {
                    let newRow = `
                                        <tr>
                                            <td>
                                                <select class="KeyRoleId form-control" name="KeyRoleId[]" id="KeyRoleId_${rowIndex}">
                                                    ${dropdownOptions}
                                                </select>
                                            </td>
                                            <td>
                                                <input type="text" class="KeyValue form-control" name="KeyValue[]" id="KeyValue_${rowIndex}" placeholder="Key Value">
                                            </td>
                                                <td>
                                                    <input type="number" class="OrderBy form-control" name="OrderBy[]" id="OrderBy_${rowIndex}" placeholder="Order By">
                                                </td>
                                            <td>
                                                <button type="button" class="deleteRowKeyrole btn btn-danger">Delete</button>
                                            </td>
                                        </tr>`;
                    $('#dataTablekeyrole tbody').append(newRow);
                });
            }

            // Add first row on page load
            addNewRowKeyrole();

            // Add row on button click
            $('#addRowkeyrole').click(function (e) {
                e.preventDefault();
                addNewRowKeyrole();
            });

            // Delete row
            $(document).on('click', '.deleteRowKeyrole', function () {
                $(this).closest('tr').remove();
                updateRowIndexesJDtbl("dataTablekeyrole");
            });

            // Function to update row indexes after deletion
            function updateRowIndexesJDtbl(tbl) {
                rowIndex = 0; // Reset row index counter
                $('#' + tbl + ' tbody tr').each(function (index) {
                    //var rowCount = $('#dataTable tbody').find('tr').length;
                    rowIndex = index;
                    // Increment row index
                    $(this).find('input[type="text"]').each(function () {
                        var inputId = $(this).attr('id').split('_')[0]; // Get the input type (name or age)
                        $(this).attr('id', inputId + '_' + rowIndex); // Update the input ID
                    });
                });
            }

            //// Form Submission
            //$("#formid").on("submit", function (event) {
            //    event.preventDefault();

            //    var tblcostdata = [];
            //    $('#dataTable tbody tr').each(function () {
            //        // var TypeOfName = $(this).find("select.TypeOfName option:selected").text().trim(); // ✅ Correct way to get text
            //        var TypeOfName = $(this).find("select.TypeOfName").val(); // ✅ Correct way to get text
            //        var TypeOfValue = $(this).find("input.TypeOfValue").val().trim();

            //        // Validate empty values
            //        if (TypeOfName !== "" && TypeOfName !== "Select Type" && TypeOfValue !== "") {
            //            tblcostdata.push({
            //                TypeOfNameId: TypeOfName,
            //                TypeOfValue: TypeOfValue
            //            });
            //        }
            //    });

            //    if (tblcostdata.length === 0) {
            //        toastr.error("Please add at least one row with valid data.");
            //        return;
            //    }

            //    var formData = new FormData(this);
            //    formData.append('tblcostdata', JSON.stringify(tblcostdata));

            //    if (confirm('Are you sure you want to submit the form?')) {
            //        $.ajax({
            //            type: "POST",
            //            url: "/JD/JobD/",
            //            data: formData,
            //            processData: false,
            //            contentType: false,
            //            success: function (resp) {
            //                if (resp.success) {
            //                    toastr.success("Success", resp.message);
            //                    $("#formid")[0].reset();
            //                    $('#dataTable tbody').empty();
            //                    addNewRow(); // Re-add first row
            //                } else {
            //                    toastr.error("Error", resp.message);
            //                }
            //            },
            //            error: function (req, error) {
            //                var errorMsg = req.statusText ? req.statusText : error;
            //                toastr.error(`There was a communication error: ${errorMsg}`);
            //            }
            //        });
            //    }
            //});
        });
    </script>
}


