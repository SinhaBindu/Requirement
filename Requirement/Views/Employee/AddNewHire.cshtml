@model Requirement.Models.EmployeeModel
@using Requirement.Manager
@{
    ViewBag.Title = "Employee Form";
    var now = DateTime.Now;
    var startDate = new DateTime(now.Year, now.Month, 1);
    var endDate = startDate.AddMonths(1).AddDays(-1);
}
<div class="page-bread page-titles">
    <div class="bread-flex">
        <h1>@ViewBag.title</h1>
        <ol class="breadcrumb"></ol>
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="card">
            <div class="card-body">
                <h3 class="text-center">New Hire Approval Form for Full Time Employees</h3>
                <h5 class="text-center">100% Budgeted position</h5>

                @using (Html.BeginForm("AddNewHire", "Employee", FormMethod.Post, new { @id = "formid", @class = "", role = "form", autocomplete = "off", enctype = "multipart/form-data" }))
                {
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="flex-form">
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.HiringTypeId, htmlAttributes: new { @class = "control-label" })
                            <span style="color:red;">*</span>
                            <div class="col-md-10s">
                                @Html.DropDownListFor(model => model.HiringTypeId, CommonModel.GetALLHyringM(), null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.HiringTypeId, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.PositionName, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.PositionName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.PositionName, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.ProjectName, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.ProjectName, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row dv_multiplecost" style="display:none;">
                            <table id="dataTable" border="1" width="90%">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Grant ID</th>
                                        <th>Activity Code</th>
                                        <th>Budget Code</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @*<tr>
                                            <td><input type="text" name="MultipleCostName" id="MultipleCostName_0" value="" /></td>
                                                <td><input type="text" name="GrantID" id="GrantID_0" value="" /></td>
                                                <td><input type="text" name="ActivityCode" id="ActivityCode_0" value="" /></td>
                                                <td><input type="text" name="BudgetCode" id="BudgetCode_0" value="" /></td>
                                            <td><button class="deleteRow">Delete</button></td>
                                        </tr>*@
                                </tbody>
                            </table>

                            <button id="addRow">Add Row</button>
                        </div>

                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.LocationId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.DropDownListFor(model => model.LocationId, CommonModel.GetALLLocation(), null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6 dv_otherlocation" style="display:none;">
                                @Html.LabelFor(model => model.OtherLocation, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.OtherLocation, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.OtherLocation, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.TypeofApplicableId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                <div class="col-md-10s">
                                    @Html.DropDownListFor(model => model.TypeofApplicableId, CommonModel.GetALLApplicableM(), null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.TypeofApplicableId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.NoofPositionsId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.NoofPositionsId, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.NoofPositionsId, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.jobLocationTypeId, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                <div class="col-md-10s">
                                    @Html.DropDownListFor(model => model.jobLocationTypeId, CommonModel.GetALLJobLocationM(), null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.jobLocationTypeId, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.ReportingManager, htmlAttributes: new { @class = "control-label" })
                            <span style="color:red;">*</span>
                            @Html.TextBoxFor(model => model.ReportingManager, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.ReportingManager, "", new { @class = "text-danger" })
                        </div>

                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Durationoftheposition_Fdate, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.Durationoftheposition_Fdate, new { @class = "datepicker form-control", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.Durationoftheposition_Fdate, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Durationoftheposition_Tdate, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.Durationoftheposition_Tdate, new { @class = "datepicker form-control", autocomplete = "off" })
                                @Html.ValidationMessageFor(model => model.Durationoftheposition_Tdate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6 dv_CostCentreCode_Id" style="display:none;">
                            @Html.LabelFor(model => model.CostCentreCode_Id, htmlAttributes: new { @class = "control-label" })
                            <span style="color:red;">*</span>
                            @Html.TextBoxFor(model => model.CostCentreCode_Id, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CostCentreCode_Id, "", new { @class = "text-danger" })
                        </div>

                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.BaseSalRangepermonth_Id, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.BaseSalRangepermonth_Id, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.BaseSalRangepermonth_Id, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Grade_Id, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                <div class="col-md-10s">
                                    @Html.DropDownListFor(model => model.Grade_Id, CommonModel.GetALLGradeM(), null, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Grade_Id, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.JD_Availability_Id, htmlAttributes: new { @class = "control-label col-xs-12 col-lg-4" })
                            <div class="checkbox">
                                @foreach (var item in CommonModel.GetALLYesNoMId())
                                {
                                    <div class="input-spacer">
                                        @Html.RadioButtonFor(model => model.JD_Availability_Id, item.Value, new { id = "JD_Availability_Id" + item.Value }) @item.Text
                                    </div>
                                }

                                @Html.ValidationMessageFor(model => model.JD_Availability_Id, "", new { @class = "text-danger" })
                            </div>
                            <div class="mark-devide"></div>
                        </div>


                        <div class="form-group" id="div_JD_AvailabilityIfYes_Doc" style="display: none;">
                            @Html.LabelFor(model => model.JD_AvailabilityIfYes_Doc, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.JD_AvailabilityIfYes_Doc, new { @class = "form-control-input-2", type = "file" })
                                @Html.ValidationMessageFor(model => model.JD_AvailabilityIfYes_Doc, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Advertisement_Id, htmlAttributes: new { @class = "control-label col-xs-12 col-lg-4" })
                                <div class="checkbox">
                                    @foreach (var item in CommonModel.GetALLAdvertisement())
                                    {
                                        <div class="input-spacer">
                                            @Html.RadioButtonFor(model => model.Advertisement_Id, item.Value, new { id = "GetALLAdvertisement" + item.Value }) @item.Text
                                        </div>
                                    }

                                    @Html.ValidationMessageFor(model => model.Advertisement_Id, "", new { @class = "text-danger" })
                                </div>
                                <div class="mark-devide"></div>
                            </div>


                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.EmpaneledHead_Id, htmlAttributes: new { @class = "control-label col-xs-12 col-lg-4" })
                                <div class="checkbox">
                                    @foreach (var item in CommonModel.GetALLYesNoMId().ToList())
                                    {
                                        <div class="input-spacer">
                                            @Html.RadioButtonFor(model => model.EmpaneledHead_Id, item.Value, new { id = "EmpaneledHead_Id" + item.Value }) @item.Text
                                        </div>
                                    }

                                    @Html.ValidationMessageFor(model => model.EmpaneledHead_Id, "", new { @class = "text-danger" })
                                </div>
                                <div class="mark-devide"></div>
                            </div>

                        </div>

                        <div class="form-group col-md-6" id="div_TypeOfInterview">
                            @Html.LabelFor(model => model.TypeOfInterview, htmlAttributes: new { @class = "control-label" })
                            <span style="color:red;">*</span>
                            <div class="col-md-10s">
                                @Html.DropDownListFor(model => model.TypeOfInterview, CommonModel.GetALLIT(), null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.TypeOfInterview, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6" id="div_InterviewPanel" style="display: none;">
                            @Html.LabelFor(model => model.InterviewPanel, htmlAttributes: new { @class = "control-label" })
                            <span style="color:red;">*</span>
                            @Html.TextAreaFor(model => model.InterviewPanel, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.InterviewPanel, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group col-md-6" id="div_InterviewPanel2" style="display: none;">
                            @Html.LabelFor(model => model.InterviewPanel2, htmlAttributes: new { @class = "control-label" })
                            <span style="color:red;">*</span>
                            @Html.TextAreaFor(model => model.InterviewPanel2, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.InterviewPanel2, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.SelectionProcess_Id, htmlAttributes: new { @class = "control-label" })
                            <span style="color:red;">*</span>
                            <div class="col-md-10s">
                                @Html.DropDownListFor(model => model.SelectionProcess_Id, CommonModel.GetALLSPM(), null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.SelectionProcess_Id, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.LaptopwithSpecifications_Id, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.LaptopwithSpecifications_Id, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LaptopwithSpecifications_Id, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.Anyspecificsoftwarewithlicense, htmlAttributes: new { @class = "control-label" })
                                <span style="color:red;">*</span>
                                @Html.TextBoxFor(model => model.Anyspecificsoftwarewithlicense, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Anyspecificsoftwarewithlicense, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-row pt-1">
                            <div class="form-group col-md-4 offset-4">
                                @*<button type="submit" class="btn btn-primary">Submit</button>*@
                                <input type="submit" name="btnsubmit" id="btnsubmit" class="btn btn-primary" value="Submit" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            let rowIndex = 0; // Counter to track row index
            // Add Row
            $('#addRow').click(function (e) {
                e.preventDefault();
                var rowCount = $('#dataTable tbody').find('tr').length;
                if (rowCount == 0)
                    rowIndex = 0;
                else
                    rowIndex++;
                //rowIndex = rowCount == 0 ? 0 : rowIndex++; // Set rowIndex to the next available index
                var newRow = '<tr>' +
                    '<td><input type="text" class="MultipleCostName" name="MultipleCostName" id="MultipleCostName_' + rowIndex + '" placeholder="Name"></td>' +
                    '<td><input type="text" class="GrantID" name="GrantID" id="GrantID_' + rowIndex + '" placeholder="Grant ID"></td>' +
                    '<td><input type="text" class="ActivityCode" name="ActivityCode" id="ActivityCode_' + rowIndex + '" placeholder="Activity Code"></td>' +
                    '<td><input type="text" class="BudgetCode" name="BudgetCode" id="BudgetCode_' + rowIndex + '" placeholder="Budget Code"></td>' +
                    '<td><button class="deleteRow">Delete</button></td>' +
                    '</tr>';
                $('#dataTable tbody').append(newRow);
            });

            // Delete Row
            $(document).on('click', '.deleteRow', function () {
                $(this).closest('tr').remove();
                updateRowIndexes();
            });

            // Function to update row indexes after deletion
            function updateRowIndexes() {
                rowIndex = 0; // Reset row index counter
                $('#dataTable tbody tr').each(function (index) {
                    //var rowCount = $('#dataTable tbody').find('tr').length;
                    rowIndex = index;
                    // Increment row index
                    $(this).find('input[type="text"]').each(function () {
                        var inputId = $(this).attr('id').split('_')[0]; // Get the input type (name or age)
                        $(this).attr('id', inputId + '_' + rowIndex); // Update the input ID
                    });
                });
            }
        });
    </script>

    <script>
        $(document).ready(function () {
            var dateFormat = "dd-M-yy";
            from = $("#Durationoftheposition_Fdate").datepicker({
                defaultDate: "+1w",
                changeMonth: true,
                changeYear: true,
                numberOfMonths: 1,
                dateFormat: 'dd-M-yy',
            }).on("change", function () {
                to.datepicker("option", "minDate", getDate(this));
            }),
                to = $("#Durationoftheposition_Tdate").datepicker({
                    defaultDate: "+1w",
                    changeMonth: true,
                    changeYear: true,
                    numberOfMonths: 1,
                    dateFormat: 'dd-M-yy',
                }).on("change", function () {
                    from.datepicker("option", "maxDate", getDate(this));
                });
            function getDate(element) {
                var date;
                try {
                    date = $.datepicker.parseDate(dateFormat, element.value);
                } catch (error) {
                    date = null;
                }
                return date;
            }
            $('#TypeOfInterview').change(function () {
                var selectedValue = $(this).val();
                $('#div_InterviewPanel, #div_InterviewPanel2').hide();
                $('#InterviewPanel').val(''); $('#InterviewPanel2').val(''); $('#InterviewPanel').removeAttr('required'); $('#InterviewPanel2').removeAttr('required');
                if (selectedValue == '1') { // Round 1
                    $('#div_InterviewPanel').show();
                    $('#InterviewPanel').attr('required', 'required');
                } else if (selectedValue == '2') { // Round 2
                    $('#div_InterviewPanel, #div_InterviewPanel2').show();
                    $('#InterviewPanel2').attr('required', 'required');
                }
            });
      
            // Event listener for changes in JD_Availability_Id radio buttons
            $('input[name="JD_Availability_Id"]').change(function () {
                $('#div_JD_AvailabilityIfYes_Doc').hide();
                $('#JD_AvailabilityIfYes_Doc').val('');
                if ($(this).val() == "1") {
                    $('#div_JD_AvailabilityIfYes_Doc').show();
                }
            });

            $('#HiringTypeId').change(function () {
                $('.dv_multiplecost,.dv_CostCentreCode_Id').hide(); $('#CostCentreCode_Id').val(''); $('#dataTable tbody').empty(); $('#CostCentreCode_Id').removeAttr('required');
                if ($(this).val() == "2")
                    $('.dv_multiplecost').show();
                else if ($(this).val() == "1") {
                    $('.dv_CostCentreCode_Id').show();
                    $('#CostCentreCode_Id').attr('required', 'required');
                }

            });
            $('#LocationId').change(function () {
                $('.dv_otherlocation').hide();
                if ($(this).val() == "99") {
                    $('.dv_otherlocation').show();
                }
            });

            $("#formid").on("submit", function (event) {
                event.preventDefault();
                debugger;

                var tblcostdata = [], objdata = "";
                $('#dataTable tbody tr').each(function (rowInd) {
                    var MultipleCostName = $(this).find(`#MultipleCostName_${rowInd}`).val();
                    var GrantID = $(this).find(`#GrantID_${rowInd}`).val();
                    var ActivityCode = $(this).find(`#ActivityCode_${rowInd}`).val();
                    var BudgetCode = $(this).find(`#BudgetCode_${rowInd}`).val();
                    tblcostdata.push({
                        MultipleCostName: MultipleCostName,
                        GrantID: GrantID,
                        ActivityCode: ActivityCode,
                        BudgetCode: BudgetCode,
                    });

                });

                var formData = new FormData(this);
                // Append the image file to FormData
                var imageFile = $('#JD_AvailabilityIfYes_Doc')[0].files[0];
                if (imageFile) {
                    formData.append('JD_AvailabilityIfYes_Doc', imageFile);
                }
                formData.append('tblcostdata', JSON.stringify(tblcostdata));
                if (confirm('Are you sure you want to submit the form?')) {
                    $.ajax({
                        type: "POST",
                        url: document.baseURI + "/Employee/AddNewHire/",
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (resp) {
                            if (resp.success) {
                                toastr.success("Success", resp.message);
                                $("#formid")[0].reset();
                            } else {
                                toastr.error("Error", resp.message);
                            }
                        },
                        //success: function (resp) {
                        //    if (resp.StatusType === "success") {
                        //        toastr.success("Success", resp.Message);
                        //        $("#formid")[0].reset();
                        //    } else {
                        //        toastr.error("Error", resp.Message);
                        //    }
                        //},
                        //error: function (req, error) {
                        //    var errorMsg = req.statusText ? req.statusText : error;
                        //    toastr.error("Error", `There was a communication error: ${errorMsg}`);
                        //}
                    });
                }
            });

        });
    </script>
}


<div class="notes-section" style="margin-top: 20px;">
    <h5>Notes:</h5>
    <ul>
        <li>Requestor must be the Hiring Manager/ Reporting Manager. In case Budget Holder is the Hiring Manager, signature at one place should suffice as an Approver.</li>
        <li>Finance Review and P&C review will be done by the state leads of the respective functions assigned to the Budget Holder.</li>
        <li>If the position is in anticipation of a Project, approval will be given by CEO for the purpose of advertisement & interview only. No formal offer will be made unless the project is awarded and written approval is received from the assigned Budget holder.</li>
    </ul>
</div>